# This file contains bundles to manage password between all components of a
# Rudder server (OpenLDAP, PostgreSQL, Apache WebDAV and web interface)

# It is currently only used on root servers where all components are installed
# on one host. It may be extended in the future to support changing passwords
# across multiple hosts.

bundle common p
{

  vars:

    root_server.agent::

      "root_home_path" string => execresult("/usr/bin/getent passwd root | cut -d: -f6", "useshell");

      "no" int => getfields("RUDDER_PSQL_PASSWORD:.*","/opt/rudder/etc/rudder-passwords.conf",":","psql_password");
      "no2" int => getfields("RUDDER_OPENLDAP_BIND_PASSWORD:.*","/opt/rudder/etc/rudder-passwords.conf",":","ldap_password");
      "no3" int => getfields("RUDDER_WEBDAV_PASSWORD:.*","/opt/rudder/etc/rudder-passwords.conf",":","dav_password");

      "properties_files" slist => { "${g.rudder_base}/etc/rudder-web.properties" };
      "managed_files" slist => { "@{properties_files}", "/${root_home_path}/.pgpass" };

}

bundle agent root_password_check_disclaimer
{

  vars:

      "disclaim" slist => { "@{p.managed_files}" };

  files:

    root_server::

      "${disclaim}"
        edit_line => insert_rudder_disclaimer,
        comment => "Insert a disclaimer into Rudder";

}

bundle agent root_password_security
{
  vars:
    "secure_files" slist => { "@{p.managed_files}", "/opt/rudder/etc/rudder-passwords.conf", "/opt/rudder/etc/rudder-users.xml" };

  files:
    # ensure password access is forbidden
    root_server::
      "${secure_files}"
        perms => mog("600", "root", "0");
      # needs to be readable by ldap daemon
      "/opt/rudder/etc/openldap/slapd.conf"
        perms => mog("640", "root", "rudder-slapd");
}

bundle agent root_password_check_file
{

  vars:

      "pgpass[1]" string => "${rudder_postgresql.host}";
      "pgpass[2]" string => "5432";
      "pgpass[3]" string => "${rudder_postgresql.db_user}";
      "pgpass[4]" string => "${rudder_postgresql.db_name}";
      "pgpass[5]" string => "${rudder_postgresql.db_pass}";

  files:

    root_server::

      "${g.rudder_base}/etc/rudder-passwords.conf"
        perms => mog("600", "root", "0"),
        classes => classes_generic("rudder_passwords");

      "/${p.root_home_path}/.pgpass"
        create    => "true",
        edit_line => root_password_check_file_pgpass("root_password_check_file.pgpass"),
        classes   => classes_generic("rudder_postgres_pgpass");

  methods:
    root_server::
      "any" usebundle => rudder_common_reports_generic("server-roles", "rudder_passwords", "${server_roles_common.directiveId}", "Check rudder-passwords.conf", "None", "Presence and permissions of Rudder password file");
      "any" usebundle => rudder_common_reports_generic("server-roles", "rudder_postgres_pgpass", "${server_roles_common.directiveId}", "Check pgpass file", "None", "Presence and permissions of pgsql password file");

    policy_server.!root_server::
      "any" usebundle => rudder_common_report("server-roles", "result_na", "${server_roles_common.directiveId}", "Check rudder-passwords.conf", "None", "Rudder passwords file does not need to be checked on relay servers. Skipping.");
      "any" usebundle => rudder_common_report("server-roles", "result_na", "${server_roles_common.directiveId}", "Check pgpass file", "None", "Rudder passwords file does not need to be checked on relay servers. Skipping.");
}

bundle agent root_password_check_ldap
{

  vars:

      # Build an array using ldap configuration values

      "rudder[ldap.authpw]" string => "${p.ldap_password[2]}";

      "slapd[rootpw]" string => "${p.ldap_password[2]}"; # Looks like a bug, I can not use execresult("/opt/rudder/sbin/slappasswd -s ${p.ldap_password[2]}","noshell");

      "prop_edit" slist => { "@{p.properties_files}" };

  classes:
    any::
      "pass3" expression => "pass2";
      "pass2" expression => "pass1";
      "pass1" expression => "any";

  files:

    root_server::

      "${prop_edit}"
        edit_line => set_variable_values("root_password_check_ldap.rudder"),
        classes   => classes_generic("rudder_properties_ldap_password"),
        comment => "Verifying the Rudder web interface properties file passwords and users";

      "${g.rudder_base}/etc/openldap/slapd.conf"
        edit_line => update_slapd("root_password_check_ldap.slapd"),
        classes   => classes_generic("rudder_slapd_ldap_password"),
        comment => "Verifying the Rudder LDAP file password and user";

  methods:

    pass2.rudder_slapd_ldap_password_repaired::
      "restart_slapd" usebundle => disable_reporting;
      "restart_slapd" usebundle => _method_reporting_context("Check LDAP in rudder-webapp.properties", "None");
      "restart_slapd" usebundle => service_restart("rudder-slapd");
      "restart_slapd" usebundle => enable_reporting;

    pass3.root_server::
      "any" usebundle => rudder_common_reports_generic("server-roles", "rudder_properties_ldap_password", "${server_roles_common.directiveId}", "Check LDAP in rudder-webapp.properties", "None", "Web interface configuration files (checked LDAP password)");
      "any" usebundle => rudder_common_reports_generic("server-roles", "rudder_slapd_ldap_password", "${server_roles_common.directiveId}", "Check LDAP credentials", "None", "OpenLDAP configuration file (rootdn password)");

    pass3.root_server.service_restart_rudder_slapd_repaired::
      "any" usebundle => rudder_common_report("server-roles", "log_info", "${server_roles_common.directiveId}", "Check LDAP credentials", "None", "rudder-slapd has been restarted");

    pass3.!root_server::
      "any" usebundle => rudder_common_report("server-roles", "result_na", "${server_roles_common.directiveId}", "Check LDAP in rudder-webapp.properties", "None", "Web interface configuration files do not need to be checked on relay servers. Skipping.");
      "any" usebundle => rudder_common_report("server-roles", "result_na", "${server_roles_common.directiveId}", "Check LDAP credentials", "None", "OpenLDAP configuration file do not need to be checked on relay servers. Skipping.");

}

bundle agent root_password_check_psql
{

  vars:

    root_server::
      # Build an array using PSQL configuration values
      "rudder[rudder.jdbc.password]" string => "${p.psql_password[2]}";

  classes:

    root_server.agent::

      "psql_cant_connect" not => returnszero("/usr/bin/psql --no-password --host localhost --username rudder --dbname rudder --quiet --output /dev/null --command 'select 1' 2> /dev/null","useshell");

    any::
      "pass3" expression => "pass2";
      "pass2" expression => "pass1";
      "pass1" expression => "any";

  files:

    root_server::

      "${g.rudder_base}/etc/rudder-web.properties"
        edit_line => set_variable_values("root_password_check_psql.rudder"),
        classes   => classes_generic("rudder_properties_sql_password"),
        comment => "Verifying the Rudder web interface properties file passwords and users";

  methods:

    pass3.root_server::
      "any" usebundle => rudder_common_reports_generic("server-roles", "rudder_properties_sql_password", "${server_roles_common.directiveId}", "Check SQL in rudder-webapp.properties", "None", "Web interface configuration files (SQL password)");
      "any" usebundle => rudder_common_reports_generic("server-roles", "rudder_psql_sql_password", "${server_roles_common.directiveId}", "Check SQL credentials", "None", "PostgreSQL user account's password");

    pass3.root_server.!rudder_psql_sql_password_reached::
      "any" usebundle => rudder_common_report("server-roles", "result_success", "${server_roles_common.directiveId}", "Check SQL credentials", "None", "PostgreSQL user account's already correct.");

    pass3.!root_server::
      "any" usebundle => rudder_common_report("server-roles", "result_na", "${server_roles_common.directiveId}", "Check SQL in rudder-webapp.properties", "None", "Web interface configuration files do not need to be checked on relay servers. Skipping.");
      "any" usebundle => rudder_common_report("server-roles", "result_na", "${server_roles_common.directiveId}", "Check SQL credentials", "None", "PostgreSQL user account's do not need to be checked on relay servers. Skipping.");

  commands:

    psql_cant_connect|rudder_properties_sql_password_repaired::
      "/usr/bin/psql --no-password -q -c \"ALTER USER rudder WITH PASSWORD '${p.psql_password[2]}'\""
        contain => setuid_sh("postgres"),
        classes => classes_generic("rudder_psql_sql_password");
}

bundle agent root_password_check_dav
{

  vars:

    debian::
      "webdav_check_wwwgroup" string => "www-data";

    redhat::
      "webdav_check_wwwgroup" string => "apache";

    !debian.!redhat::
      "webdav_check_wwwgroup" string => "www";

    SuSE::
      "htpasswd_bin" string => "/usr/bin/htpasswd2";

    !SuSE::
      "htpasswd_bin" string => "/usr/bin/htpasswd";

    root_server::
    # Build an array using webdav configuration values
      "rudder[rudder.webdav.password]" string => "${p.dav_password[2]}";

  classes:
    agent::
      "dav_cant_connect" not => returnszero("${g.rudder_curl} --tlsv1.2 --proxy '' ${g.rudder_verify_certs_option} --silent --fail --output /dev/null --user ${g.davuser}:${g.davpw} --upload-file /opt/rudder/etc/uuid.hive https://localhost/inventory-updates/uuid.hive","noshell");

    any::
      "pass3" expression => "pass2";
      "pass2" expression => "pass1";
      "pass1" expression => "any";

  files:

    any::
      "${g.rudder_base}/etc/htpasswd-webdav"
        create => "true",
        perms => mog("640", "root", "${webdav_check_wwwgroup}");

    root_server::

      "${g.rudder_base}/etc/rudder-web.properties"
        edit_line => set_variable_values("root_password_check_dav.rudder"),
        classes   => classes_generic("rudder_properties_dav_password"),
        comment => "Verifying the Rudder web interface properties file passwords and users";

  methods:

    pass3.root_server::
      "any" usebundle => rudder_common_reports_generic("server-roles", "rudder_properties_dav_password", "${server_roles_common.directiveId}", "Check WebDAV properties", "None", "Rudder WebDAV properties");
    pass3.!root_server::
      "any" usebundle => rudder_common_report("server-roles", "result_success", "${server_roles_common.directiveId}", "Check WebDAV properties", "None", "Rudder WebDAV properties are OK");
      
    pass3::
      "any" usebundle => rudder_common_reports_generic("server-roles", "rudder_apache_dav_password", "${server_roles_common.directiveId}", "Check WebDAV credentials", "None", "Apache WebDAV user and password");
    pass3.!rudder_apache_dav_password_reached::
      "any" usebundle => rudder_common_report("server-roles", "result_success", "${server_roles_common.directiveId}", "Check WebDAV credentials", "None", "Apache WebDAV user and password are OK");

  commands:

    dav_cant_connect::

      # Apache reads this file when it's changed, no need to restart or reload it after it's changed
      "${htpasswd_bin}"
        args => "-b ${g.rudder_base}/etc/htpasswd-webdav ${g.davuser} ${g.davpw}",
        classes   => classes_generic("rudder_apache_dav_password"),
        comment => "Repairing the Rudder WebDAV user and password";

}

bundle agent root_password_restart_jetty
{

  classes:
    any::
      "pass3" expression => "pass2";
      "pass2" expression => "pass1";
      "pass1" expression => "any";

  methods:

    pass2.(rudder_slapd_ldap_password_repaired|rudder_properties_ldap_password_repaired|rudder_properties_sql_password_repaired|rudder_properties_dav_password_repaired)::
      "restart_jetty_password" usebundle => disable_reporting; 
      "restart_jetty_password" usebundle => _method_reporting_context("Check rudder-webapp.properties", "None");
      "restart_jetty_password" usebundle => service_restart("rudder-jetty");
      "restart_jetty_password" usebundle => enable_reporting;  

    pass3.service_restart_rudder_jetty_repaired::
      "any" usebundle => rudder_common_report("server-roles", "log_info", "${server_roles_common.directiveId}", "Check rudder-passwords.conf", "None", "Jetty has been restarted");

}

bundle edit_line update_slapd(tab)
{

  vars:

      "index" slist => getindices("${tab}");

  delete_lines:

      "${index}.*";

  insert_lines:

      "${index}		${${tab}[${index}]}" location => after("^rootdn.*");

}

bundle edit_line root_password_check_file_pgpass(parameter)
{
  vars:

      "indices" slist => getindices(${parameter});

  field_edits:

      "localhost:5432:rudder:.*"

    # Set field of the file to parameter
        edit_field => col(":","${indices}","${${parameter}[${indices}]}","set");

  insert_lines:

      "localhost:5432:rudder:${${parameter}[4]}:${${parameter}[5]}";

}
