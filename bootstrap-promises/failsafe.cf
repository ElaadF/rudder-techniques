body common control
{
    bundlesequence   => { "update" };
    output_prefix    => "rudder";
    protocol_version => "2";
    tls_min_version  => "1.2";
}

body server control
{
    # Listen on correct port from the beginning
    port => "5309";
}

@if feature(copyfrom_restrict_keys)
body agent control
{
  known_policy_server::
    copyfrom_restrict_keys => { "${rudder_update_conf.policy_server_hash}" };
}
@endif

bundle common rudder_update_conf
{
  vars:
      "policy_server_hash_file" string => "${sys.workdir}/ppkeys/policy_server_hash";
    known_policy_server::
      "policy_server_hash" string => readfile("${policy_server_hash_file}");

  classes:
      "known_policy_server" expression => fileexists("${policy_server_hash_file}"),
                                          scope => "namespace";
      "trust_new_server"    not        => "known_policy_server",
                                          scope => "namespace";
}

# WARN: this bundle comes from update.cf
bundle common server_info
{
  vars:
      "policy_server_file"
        string  => translatepath("${sys.workdir}/policy_server.dat"),
        comment => "Path to file containing address to policy server";

    #This part work, because for some reason, the evaluation converge in one pass, and allows to have
    # the correct value in policy_server value. In verbose output, policy_server_file_exists is defined first
    policy_server_file_exists::
      "policy_server_temp" string => readfile("${policy_server_file}", 2048);
       # trim space in policy_server.dat
      "policy_server"      string => regex_replace("${policy_server_temp}", " ", "", "g");

    !policy_server_file_exists::
      # Use "" as default policy_server if no policy_server.dat exists
      "policy_server" string => "";

  classes:
      "root_server"               expression => strcmp("root","${g.uuid}");
      "policy_server_file_exists" expression => fileexists("${policy_server_file}");
}

bundle agent update
{
  vars:
      "inputs"          string => "${sys.workdir}/inputs";
      "policies"        string => "${sys.masterdir}";
      "rudder_var"      string => "/var/rudder";
      "ncf_common_src"  string => "/usr/share/ncf/tree";
      "ncf_common"      string => "${rudder_var}/ncf/common";
      "ncf_excludedreps" slist => { "50_techniques" };

  files:
      "/var/rudder/ncf/."
        create  => "true",
        comment => "Make sure the ncf directory exists";

    root_server::
      "${inputs}"
        copy_from         => local("${policies}"),
        depth_search      => recurse("inf"),
        perms             => u_mog("600", "root", "0"),
        action            => immediate,
        move_obstructions => "true",
        classes           => classes_generic("config");

      "${ncf_common}"
        copy_from         => local("${ncf_common_src}"),
        depth_search      => recurse_ignore("inf", @{ncf_excludedreps}),
        perms             => u_mog("644", "root", "0"),
        action            => immediate,
        move_obstructions => "true",
        classes           => classes_generic("ncf_common");

    !root_server::
      "${inputs}"
        copy_from         => remote("${server_info.policy_server}", "${policies}"),
        depth_search      => recurse("inf"),
        perms             => u_mog("600", "root", "0"),
        action            => immediate,
        move_obstructions => "true",
        classes           => classes_generic("config");

      "${ncf_common}"
        copy_from         => remote("${server_info.policy_server}", "${ncf_common_src}"),
        depth_search      => recurse_ignore("inf", @{ncf_excludedreps}),
        perms             => u_mog("644", "root", "0"),
        action            => immediate,
        move_obstructions => "true",
        classes           => classes_generic("ncf_common");

  reports:
    !(config_error|ncf_common_error)::
      "Initial policies have been successfully downloaded from the policy server"
        action => immediate;

    config_error|ncf_common_error::
      "*********************************************************************************
* rudder-agent could not get an its configuration from the policy server.       *
* This can be caused by:                                                        *
*   * a networking issue                                                        *
*   * an unavailable server                                                     *
*   * if the node's IP in not if the allowed networks of its policy server.     *
*********************************************************************************"
        action => immediate;
}

body perms u_mog(mode,user,group)
{
    mode   => "${mode}";
    owners => { "${user}" };
    groups => { "${group}" };
}

body depth_search recurse(d)
{
    depth => "${d}";
}

body depth_search recurse_ignore(d,list)
{
        depth => "${d}";
        exclude_dirs => { @{list} };
}

body action immediate
{
    ifelapsed => "0";
}

body classes classes_generic(x)
{
      promise_repaired => { "promise_repaired_$(x)", "$(x)_repaired", "$(x)_ok", "$(x)_reached", "$(x)_not_kept" };
      repair_failed => { "repair_failed_$(x)", "$(x)_failed", "$(x)_not_ok", "$(x)_error", "$(x)_not_kept", "$(x)_not_repaired", "$(x)_reached" };
      repair_denied => { "repair_denied_$(x)", "$(x)_denied", "$(x)_not_ok", "$(x)_error", "$(x)_not_kept", "$(x)_not_repaired", "$(x)_reached" };
      repair_timeout => { "repair_timeout_$(x)", "$(x)_timeout", "$(x)_not_ok", "$(x)_error", "$(x)_not_kept", "$(x)_not_repaired", "$(x)_reached" };
      promise_kept => { "promise_kept_$(x)", "$(x)_kept", "$(x)_ok", "$(x)_not_repaired", "$(x)_reached" };
}

body copy_from remote(server, path)
{
        servers    => {
          "${server}"
        };
        source      => "${path}";
        compare     => "digest";
        preserve    => "false";
        verify      => "true";
        purge       => "true";
        copy_backup => "false";
        portnumber  => "5309";
      trust_new_server.!root_server::
        trustkey    => "true";
}

body copy_from local(from)
{
        source      => "${from}";
        copy_backup => "false";
        preserve    => "false";
        compare     => "digest";
        purge       => "true";
        portnumber  => "5309";
}
